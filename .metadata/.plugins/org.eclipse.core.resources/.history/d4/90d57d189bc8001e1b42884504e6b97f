
package com.sigma.dao;

import java.util.Arrays;

import com.sigma.beans.*;
import com.sigma.service.*;

public class BookingDAOArrayImplementation implements BookingDao {

	public static Bookings[] book = new Bookings[0];
	FlightService flightservice=new FlightService();
	Flight[] availableFlights=new Flight[0];
	public Flight[] searchFlightDetails(Flight[] flightdetails,String searchOrigin, String searchDestination) 
	{
		//Flight[] availableFlights=new Flight[0];
		for(Flight obj : flightdetails)
		{
			if(obj.getOrigin().equalsIgnoreCase(searchOrigin)&&obj.getDestination().equalsIgnoreCase(searchDestination))
			{
				availableFlights=Arrays.copyOf(availableFlights,availableFlights.length+1);
				availableFlights[availableFlights.length-1]=obj;
			}	
		}
		if(availableFlights.length>0)
		{
			return availableFlights;
		}
		return null;
	}
	public int checkEconomyAvail(int id,int noofseats)
	{
		for(Flight obj : availableFlights)
		{
		//if(obj.getFlightId()==id)
		{
			if(obj.getEconomySeat()!=0)
				return 1;
			else if(obj.getEconomySeat()<noofseats)
				return 2;
			else
			   {
				int total_count= obj.getEconomySeat()-noofseats;
				obj.setEconomySeat(total_count);
				return 4;
				}
		}
		}
		return 3;
	}
	public int checkBusinessAvail(int id,int noofseats)
	{
		for(Flight obj : availableFlights)
		{
		//if(obj.getFlightId()==id)
		{
			if(obj.getBusinessSeat()!=0)
				return 1;
			else if(obj.getBusinessSeat()<noofseats)
				return 2;
			else
			   {
				int total_count= obj.getBusinessSeat()-noofseats;
				obj.setBusinessSeat(total_count);
				return 4;
				}
		}
		}
		return 3;
	}
	public int checkExecutiveAvail(int id,int noofseats)
	{
		for(Flight obj : availableFlights)
		{
		//if(obj.getFlightId()==id)
		{
			System.out.println("hello");
			if(obj.getExecutiveSeat()!=0)
				return 1;
			else if(obj.getExecutiveSeat()<noofseats)
				return 2;
			else
			   {
				int total_count= obj.getExecutiveSeat()-noofseats;
				obj.setExecutiveSeat(total_count);
				System.out.println("hai");
				return 4;
				}
		}
		}
		return 3;
	}
	
	public int addTicket(Bookings booking) 
	{
		book=Arrays.copyOf(book,book.length+1);
		book[book.length-1]=booking;
		for(Bookings i : book)
		{
			System.out.println(i.getBookingid());
			System.out.println(i.getFlightid());
			System.out.println(i.getScategory());
			System.out.println(i.getCcategory());
			System.out.println(i.getNoseats());
			System.out.println(i.getTdate());
			System.out.println(i.getBookingamt());
			System.out.println(i.getBookingstatus());
			System.out.println(i.getUserId());
		}
		for(int i=0;i<book.length;i++)
		{
			if(book[i].getScategory().equalsIgnoreCase("economy"))	
			{
				//System.out.println("not found");
				book[i].setBookingamt(1000);
				int check1 = checkEconomyAvail(book[i].getFlightid(),book[i].getNoseats());
				System.out.println(check1);
				if(check1==4)
				{
				book[i].setBookingstatus("BOOKED");
				//System.out.println("economy class booked");
				int id=book[i].getBookingid();
				return id;
				}
				else if(check1==1)
				   return 1;
				else if(check1==2)
					return 2;
				else
					return 3;	
			}
			if(book[i].getScategory().equalsIgnoreCase("business"))
				
			{
				int business_amt = 1000*2;
				book[i].setBookingamt(business_amt);
				int check2 = checkBusinessAvail(book[i].getFlightid(),book[i].getNoseats());
				if(check2==4)
				{
				book[i].setBookingstatus("BOOKED");
				int id=book[i].getBookingid();
				return id;
				}
				else if(check2==1)
				   return 1;
				else if(check2==2)
					return 2;
				else
					return 3;	
				
			}
			if(book[i].getScategory().equalsIgnoreCase("executive"))
				
			{
				int executive_amt=1000*5;
				book[i].setBookingamt(executive_amt);
				//book[i].setBookingstatus("BOOKED");	
				int check3 = checkExecutiveAvail(book[i].getFlightid(),book[i].getNoseats());
				if(check3==4)
				{
				book[i].setBookingstatus("BOOKED");
				int id = book[i].getBookingid();
				return id;
				}
				else if(check3==1)
				   return 1;
				else if(check3==2)
					return 2;
				else
					return 3;	
			}
		}
		return 4;
	}
	@Override
	public Bookings viewTicket(int id) {
		// TODO Auto-generated method stub
		for(Bookings obj:book)
		{
			if(id==obj.getBookingid())
			{
				return obj;
			}
		}
		return null;	
	}

	public boolean cancelTicket(int bookingId)
	{
		for(Bookings obj:book)
		{
			if(obj.getBookingid()==bookingId)
			{
				obj.setBookingid(0);
				for(Flight obj1 : availableFlights)
				{
				 if(obj.getCcategory().equalsIgnoreCase("business")) 
				 {
					int seat_count=obj.getNoseats();
					int inc_count=seat_count+obj1.getBusinessSeat();
					obj1.setBusinessSeat(inc_count);
				 }
				 if(obj.getCcategory().equalsIgnoreCase("economy"))
				 {
					    int seat_count=obj.getNoseats();
						int inc_count=seat_count+obj1.getEconomySeat();
						obj1.setEconomySeat(inc_count);		
				 }
				 if(obj.getCcategory().equalsIgnoreCase("executive"))
				 {
					    int seat_count=obj.getNoseats();
						int inc_count=seat_count+obj1.getExecutiveSeat();
						obj1.setExecutiveSeat(inc_count);	 
				 } 
			   }
				return true;
			}
		}
		return false;
	}
	
	public Bookings[] getBookingDetails()
	{
		if(book.length==0)
		{
			return null;
		}
		return book;
	}
}